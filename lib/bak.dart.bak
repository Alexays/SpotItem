import 'dart:convert';

import 'package:flutter/rendering.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'date_picker.dart';
import 'filter.dart';
import 'item.dart';
import 'spot_itemsType.dart';

class HomeScreen extends StatefulWidget {
  HomeScreen({Key key}) : super(key: key);
  HomeScreenState createState() => new HomeScreenState();
}

class HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  bool loading = false;
  bool _isExpanded = false;
  int _screen = 0;
  DateTime _selectedDate = new DateTime.now();
  AnimationController _expandAnimationController;
  Animation<Size> _bottomSize;

  var _itemsRecents = <Items>[];
  var _itemsNearest = <Items>[];

  getData() async {
    setState(() {
      _itemsRecents.clear();
      _itemsNearest.clear();
      loading = true;
    });
    var httpClient = createHttpClient();
    var response = await httpClient.post(
        Uri.encodeFull("http://217.182.65.67:1337/api/items"),
        body: {'lat': '14', 'lng': '14'});

    var recents = JSON.decode(response.body)['recents'];
    for (var x in recents) {
      _itemsRecents.add(new Items(
          id: x['_id'],
          name: x['name'],
          about: x['about'],
          images: x['images'],
          lastGeo: x['lastGeo'],
          calendar: x['calendar'],
          location: x['location'],
          lat: x['lat'],
          lng: x['lng'],
          tracks: x['tracks'],
          owner: x['owner']));
    }
    var nearest = JSON.decode(response.body)['items'];
    for (var x in nearest) {
      _itemsNearest.add(new Items(
          id: x['_id'],
          name: x['name'],
          about: x['about'],
          images: x['images'],
          lastGeo: x['lastGeo'],
          calendar: x['calendar'],
          location: x['location'],
          lat: x['lat'],
          lng: x['lng'],
          tracks: x['tracks'],
          owner: x['owner']));
    }
    httpClient.close();
    setState(() {
      loading = false;
    });
  }

  @override
  void initState() {
    this.getData();
    super.initState();
    _expandAnimationController = new AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 200),
    );
    _bottomSize = new SizeTween(
      begin: new Size.fromHeight(kTextTabBarHeight + 40.0),
      end: new Size.fromHeight(kTextTabBarHeight + 280.0),
    )
        .animate(new CurvedAnimation(
      parent: _expandAnimationController,
      curve: Curves.ease,
    ));
  }

  static const List<Tab> _tabs = const <Tab>[
    const Tab(text: 'DISCOVER'),
    const Tab(text: 'NEAREST YOU'),
  ];

  var _pages = <dynamic>[
    {
      'title': 'Explorer',
      'tabs': true,
      'icon': Icons.explore,
      'appbar': {'floating': true, 'pinned': true}
    },
    {
      'title': 'Me',
      'tabs': false,
      'icon': Icons.people,
      'appbar': {'floating': false, 'pinned': true}
    }
  ];

  Widget _buildBottom() {
    return new PreferredSize(
      child: new SizedBox(
        height: _bottomSize.value.height,
        child: new Column(
          children: <Widget>[
            new TabBar(
              tabs: _tabs,
            ),
            new FilterBar(
              onExpandedChanged: (bool value) async {
                if (value && _expandAnimationController.isDismissed) {
                  await _expandAnimationController.forward();
                  setState(() {
                    _isExpanded = true;
                  });
                } else if (!value && _expandAnimationController.isCompleted) {
                  await _expandAnimationController.reverse();
                  setState(() {
                    _isExpanded = false;
                  });
                }
              },
              isExpanded: _isExpanded,
            ),
            new Flexible(
              child: new Stack(
                overflow: Overflow.clip,
                children: <Widget>[
                  new Positioned(
                    top: 0.0,
                    left: 0.0,
                    right: 0.0,
                    child: new DayPickerBar(
                      onChanged: (DateTime value) {
                        setState(() {
                          _selectedDate = value;
                        });
                      },
                      selectedDate: _selectedDate,
                    ),
                  )
                ],
              ),
            ),
          ],
        ),
      ),
      preferredSize: _bottomSize.value,
    );
  }

  @override
  Widget build(BuildContext context) {
    Widget recentsWidget = loading
        ? new Center(child: new CircularProgressIndicator())
        : new ItemsList(_itemsRecents);
    Widget nearestWidget = loading
        ? new Center(child: new CircularProgressIndicator())
        : new ItemsList(_itemsNearest);
    return new Scaffold(
      drawer: new Container(),
      floatingActionButton: new FloatingActionButton(
        child: new Icon(Icons.add),
        onPressed: () {},
      ),
      body: new DefaultTabController(
        length: _tabs.length,
        child: new NestedScrollView(
          headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
            return [
              new AnimatedBuilder(
                animation: _bottomSize,
                builder: (BuildContext context, Widget child) {
                  return new SliverAppBar(
                    pinned: _pages[_screen]['appbar']['pinned'],
                    floating: _pages[_screen]['appbar']['floating'],
                    title: new Text(_pages[_screen]['title']),
                    actions: <Widget>[
                      new IconButton(
                        icon: new Icon(Icons.search),
                        onPressed: () {},
                      ),
                      new PopupMenuButton(
                        child: new Icon(Icons.more_vert),
                        itemBuilder: (BuildContext context) {
                          return <PopupMenuEntry>[
                            new PopupMenuItem(
                              child: new Text('Not implemented'),
                            )
                          ];
                        },
                      ),
                    ],
                    bottom: _pages[_screen]['tabs'] ? _buildBottom() : null,
                  );
                },
              ),
            ];
          },
          body: new TabBarView(
            children: (_screen == 0)
                ? <Widget>[
                    recentsWidget,
                    nearestWidget,
                  ]
                : new List<Widget>.generate(_tabs.length, (int index) {
                    return new Center(
                      child: new Text('Second screen'),
                    );
                  }),
          ),
        ),
      ),
      bottomNavigationBar: new BottomNavigationBar(
          currentIndex: _screen,
          onTap: (int index) {
            setState(() {
              _screen = index;
            });
          },
          items: new List<BottomNavigationBarItem>.generate(_pages.length,
              (int index) {
            return new BottomNavigationBarItem(
                icon: new Icon(_pages[index]['icon']),
                title: new Text(_pages[index]['title']));
          })),
    );
  }
}

class SpotItems extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return new MaterialApp(
      title: 'SpotItems',
      theme: new ThemeData(
        primarySwatch: Colors.teal,
      ),
      home: new HomeScreen(),
      debugShowCheckedModeBanner: false,
      showPerformanceOverlay: false,
    );
  }
}

void main() {
  runApp(new SpotItems());
}
